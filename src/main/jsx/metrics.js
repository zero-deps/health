/*******************************************************************************
 * ******************************************************\ | WARNING: | | Do not
 * edit `src\main\resources\stats\metrics.js file. | | It is autogenerated. | |
 * Make changes in `src\main\jsx\metrics.js`. | \
 ******************************************************************************/

var Nodes = (function(){

  var Nodes = React.createClass({
    parseItem: function(rawData) {
      var arr = rawData.split('::');
      var paramArr = arr[3].split('.');
      var _group = paramArr[0];
      var _param = arr[3].replace(_group + ".", "");

      return {
        name:  arr[0],
        node:  arr[1],
        time:  arr[2],
        group: _group,
        param: _param,
        value: arr[4]
      }
    },
    add: function(oldData,newItem) {
      // copy old data
      var result = {};
      for (name of Object.keys(oldData)) {
        result[name] = {};
        for (node of Object.keys(oldData[name])) {
          result[name][node] = {};
          result[name][node] = oldData[name][node];
        }
      }
      // add new item
      result[newItem.name] = result[newItem.name] || {};
      result[newItem.name][newItem.node] = result[newItem.name][newItem.node] || {};
      result[newItem.name][newItem.node][newItem.group] = result[newItem.name][newItem.node][newItem.group] || {};
      result[newItem.name][newItem.node][newItem.group][newItem.param] = {value: newItem.value, time: newItem.time};

      result[newItem.name][newItem.node]['updated']  = newItem.time;
      /*
		 * result[newItem.name][newItem.node]['messages'] =
		 * result[newItem.name][newItem.node]['messages'] || {};
		 * result[newItem.name][newItem.node]['messages'][newItem.param] =
		 * {value: newItem.value, time: newItem.time};
		 */
      return result;
    },
    getInitialState: function() {
      return {data:{},activeName:null,details:null}
    },
    componentDidMount: function() {
      this.props.handlers.metric = function(msg) {
        if (this.isMounted()) {
          var oldData = this.state.data;
          var newItem = this.parseItem(msg);
          var data = this.add(oldData,newItem);
          var activeName = this.state.activeName !== null ? this.state.activeName : newItem.name;
          this.setState({data:data,activeName:activeName})
        }
      }.bind(this);
    },
    handleChooseTab: function(tab) {
      this.setState({activeName:tab.props.name,details:null})
    },
    handleChooseRow: function(node) {
      this.setState({details:{name:this.state.activeName,node:node}})
    },
    render: function() {
      var data = this.state.data;
      var names = Object.keys(data);
      var el;
      if (names.length === 0)
        el = <div className="alert alert-info">Please wait...</div>
      else {
        var activeName = this.state.activeName;
        el =
          <div className="row">
            <div className="col-sm-6 col-md-5 col-lg-4">
              <Tabs names={names} active={activeName} onChoose={this.handleChooseTab} />
              <Table nameData={data[activeName]} onChooseRow={this.handleChooseRow} />
            </div>
            {(() => {
            var details = this.state.details;

            if (details !== null) return (
            <div className="col-sm-6 col-md-5 col-lg-8">
              <div className="row">
                <div className="col-xs-12">
                  <h3 style={{marginTop:0}}>{details.name}@{details.node}</h3>
                </div>
              </div>

              <div className="row">
	            <div className="col-lg-6">
                  <h4>Metrics</h4>
                  <Metrics data={data[details.name][details.node]} />
                </div>
               </div>

               <div className="row">
               	<div className="col-*-3">
	               <h4>Actor System</h4>
	               <ActorSystem data={data[details.name][details.node]} />
	             </div>
	          </div>
            </div>
            )})()}
          </div>
      }
      return <div className="col-xs-12">{el}</div>
    }
  });

  var Tabs = React.createClass({
    render: function() {
      var tabs = this.props.names.map(function(name,i) {
        var active = name === this.props.active;
        return <Tab name={name} active={active} onChoose={this.props.onChoose} key={i} />;
      }.bind(this));
      return <ul className="nav nav-pills">{tabs}</ul>;
    }
  });

  var Tab = React.createClass({
    handleChoose: function() {
      this.props.onChoose(this);
    },
    render: function() {
      var className = this.props.active ? 'active' : '';
      return (
        <li role="presentation" className={className}>
          <a href="#" onClick={this.handleChoose}>{this.props.name}</a>
        </li>
      );
    }
  });

  var Table = React.createClass({
    render: function() {
      var nameData = this.props.nameData;
      var rows = Object.keys(nameData).map(function(node,i) {
    	return <Row node={node}
                    nodeData={nameData[node]}
                    onChoose={this.props.onChooseRow}
                    key={i} />
      }.bind(this));
      var minWidth = {width:'1px'}
      return (
        <div className="table-responsive" style={{marginTop:'10px'}}>
          <table className="table">
            <thead>
              <tr>
                <th>Node</th>
                <th style={minWidth}>Status</th>
              </tr>
            </thead>
            <tbody>{rows}</tbody>
          </table>
        </div>
      );
    }
  });

  var Row = React.createClass({
    componentDidMount: function() {
      this.timer = setInterval(this.tick, 1000);
    },
    componentWillUnmount: function() {
      clearInterval(this.timer);
    },
    tick: function() {
      this.forceUpdate();
    },
    handleChoose: function() {
      this.props.onChoose(this.props.node);
    },
    render: function() {
      var elapsed = Math.floor((new Date() - this.props.nodeData['updated']) / 1000);
      var active = elapsed < 15;
      return (
        <tr className={active ? "success" : "danger"} style={{cursor:'pointer'}} onClick={this.handleChoose}>
          <td>{this.props.node}</td>
          <td>
          {(() => {
            if (active) return <div style={{textAlign:'center'}}>OK</div>;
            else return <div><span style={{whiteSpace:'nowrap'}}>{secToTimeInterval(elapsed)}</span> ago</div>;
          })()}
          </td>
        </tr>
      );
    }
  });

  var ActorSystem = React.createClass({
	  componentDidMount: function() {
	      this.timer = setInterval(this.tick, 1000);
	    },
	  componentWillUnmount: function() {
	      clearInterval(this.timer);
	    },
	  tick: function() {
	      this.forceUpdate();
	    },
	  service: function(router, instances) {
		  function getColor(time) {
			  var delta = (new Date().getTime() - time) / 1000;
			  if (delta > 15){
				  return '#d43f3a'; // error
			  }

			  if (delta > 10){
				  return '#d58512'; // warning
			  }

			  return '#398439'; // OK
		  }

		  var liClass = 'list-group-item list-group-item-success';

		  var instancesList = [];

		  for(var inst in instances){
			  var color = {backgroundColor: getColor(instances[inst].ping)};

			  var delta = "NaN";

			  if (instances[inst].delta != "") {
				  if (Number(instances[inst].delta) != NaN) delta = Number(instances[inst].delta) + "ms";
			  }

			  instancesList.push(<span className="badge" style = {color}>{inst + ":" + delta}</span>);
		  }


		  return (
				  <li className={liClass}>
				  	{router}
				  	{instancesList}
				  </li>
		  )
	  },

	  services: function(){
		  var services = {};
		  var data = this.props.data['actorsys'];

		  for (var key in data){
			  var keyArr = key.split(".");
			  var router = keyArr[0];
              var inst = keyArr[1];


			  services[router]  = services[router] || {};
			  services[router][inst] = services[router][inst] || {};

			  if (data[key].value && data[key].time){
				  var values = data[key].value.split(".");
				  	if (values.length == 2){
				  		services[router][inst].ping = values[0];
				  		services[router][inst].delta = values[1];
				  	}
			  }

		  }

		  var data = [];
		  var i = 0;
		  var sortedKeys = Object.keys(services);
		  sortedKeys.sort();

		  for (var i in sortedKeys){
			  var key = sortedKeys[i];
			  data[i] = this.service(key, services[key]);
	      };

	      return data;
	  },

	  render: function() {
		  return (
			    <ul className="list-group">
				  {this.services()}
			    </ul>
		   )
	  }
  });

  var Metrics = React.createClass({
    render: function() {
      function getValue(data, keyArray){
    	  if (data == undefined) return NaN;
    	  var _data = data;
    	  for(var i = 0; i < keyArray.length; i++) {
    		  if(_data[keyArray[i]] == undefined) return NaN;
    		  _data = _data[keyArray[i]];
    	  }

    	  return _data;
      }
      var data = {
    	  'sys.uptime':getValue(this.props.data, ['sys', 'uptime', 'value']),
    	  'cpu.load': getValue(this.props.data, ['cpu', 'load', 'value']),
    	  'mem.used': getValue(this.props.data, ['mem','used','value']),
    	  'mem.free': getValue(this.props.data, ['mem','free','value']),
    	  'mem.total': getValue(this.props.data, ['mem','total','value']),
    	  'root./.used': getValue(this.props.data, ['root','/.used','value']),
    	  'root./.free': getValue(this.props.data, ['root','/.free','value']),
    	  'root./.total': getValue(this.props.data, ['root','/.total','value'])
      };
      return (
        <ul className="list-group">
          <li className="list-group-item">
            <span className="badge">{secToTimeInterval(Number(data['sys.uptime']))}</span>
            Uptime
          </li>
          <li className="list-group-item">
            <span title="%" className="badge">{(Number(data['cpu.load'])*100).toFixed(2)}</span>
            CPU Load
          </li>
          <li className="list-group-item">
            <span title="MB" className="badge">{bytesToMb(Number(data['mem.used']))}</span>
            Memory Used
          </li>
          <li className="list-group-item">
            <span title="MB" className="badge">{bytesToMb(Number(data['mem.free']))}</span>
            Memory Free
          </li>
          <li className="list-group-item">
            <span title="MB" className="badge">{bytesToMb(Number(data['mem.total']))}</span>
            Memory Total
          </li>
          <li className="list-group-item">
            <span title="GB" className="badge">{kbToGb(Number(data['root./.used']))}</span>
            FS Used
          </li>
          <li className="list-group-item">
            <span title="GB" className="badge">{kbToGb(Number(data['root./.free']))}</span>
            FS Free
          </li>
          <li className="list-group-item">
            <span title="GB" className="badge">{kbToGb(Number(data['root./.total']))}</span>
            FS Total
          </li>
        </ul>
      );
    }
  });

  return Nodes;
})();